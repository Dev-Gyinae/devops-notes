nstalling Docker Inside a Jenkins Container & Enabling Docker Socket Access
To allow a Jenkins container to run Docker commands (e.g., docker build, docker push) during CI/CD pipelines, you need to:
  1. Install Docker inside the Jenkins container (Docker-in-Docker).
  2. Mount the hostâ€™s Docker socket (/var/run/docker.sock) for permissions.

1. Run Jenkins with Docker Socket & CLI Tools
Modify your docker run command to:

docker run -d \
  --name jenkins \
  -p 8080:8080 -p 50000:50000 \
  -v jenkins_home:/var/jenkins_home \
  -v /var/run/docker.sock:/var/run/docker.sock \  # Mount Docker socket
  -v $(which docker):/usr/bin/docker \            # Mount Docker CLI
  jenkins/jenkins:lts

2. Install Docker Inside the Container
Once Jenkins is running:
      docker exec -it -u root jenkins /bin/bash
      apt update && apt install -y docker.io

Restrict Jenkins permissions with:
      chmod 666 /var/run/docker.sock  # Least privilege (better: use Docker groups)

Inside the Jenkins container:
      docker ps  # Should list containers from the host




Auto builds can be triggered with Gitlab CI -> Jenkins.
Multi branch pipelines can be triggered with webhooks.
target server ports needs to be opened to ip of jenkins as well
